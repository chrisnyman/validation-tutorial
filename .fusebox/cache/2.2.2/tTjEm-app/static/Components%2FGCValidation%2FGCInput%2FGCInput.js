module.exports = { contents: "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _GCRadio = require('./GCRadio');\n\nvar _GCRadio2 = _interopRequireDefault(_GCRadio);\n\nvar _GCCheckbox = require('./GCCheckbox');\n\nvar _GCCheckbox2 = _interopRequireDefault(_GCCheckbox);\n\nvar _GCSelect = require('./GCSelect');\n\nvar _GCSelect2 = _interopRequireDefault(_GCSelect);\n\nvar _GCInputLabel = require('./GCInputLabel');\n\nvar _GCInputLabel2 = _interopRequireDefault(_GCInputLabel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar GCInput = function (_Component) {\n  _inherits(GCInput, _Component);\n\n  function GCInput(props, context) {\n    _classCallCheck(this, GCInput);\n\n    var _this = _possibleConstructorReturn(this, (GCInput.__proto__ || Object.getPrototypeOf(GCInput)).call(this, props, context));\n\n    _this.state = {\n      type: 'text',\n      validationMessage: null,\n      touchedByParent: props.touchedByParent\n    };\n    return _this;\n  }\n\n  _createClass(GCInput, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.determineType(this.props.type);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.touchedByParent && this.props.touchedByParent !== nextProps.touchedByParent) {\n        this.setState({ touchedByParent: true }, function () {\n          _this2.validateInput();\n        });\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return nextProps.value !== this.props.value && this.props.type !== 'select' || this.props.type === 'select' || nextProps.touchedByParent !== this.props.touchedByParent || nextState.validationMessage !== this.state.validationMessage || nextProps.options !== this.props.options;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (this.props.type === 'checkbox' || this.props.type === 'radio') {\n        this.validateInput();\n      }\n    }\n  }, {\n    key: 'determineType',\n    value: function determineType(type) {\n      var inputType = void 0;\n      switch (type) {\n        case 'name':\n          inputType = 'text';\n          break;\n        case 'text':\n        case 'url':\n          inputType = 'text';\n          break;\n        case 'email':\n          inputType = 'email';\n          break;\n        case 'checkbox':\n          inputType = 'checkbox';\n          break;\n        case 'password':\n          inputType = 'password';\n          break;\n        case 'date':\n          inputType = 'date';\n          break;\n        case 'range':\n          inputType = 'range';\n          break;\n        case 'number':\n          inputType = 'number';\n          break;\n        case 'textarea':\n          inputType = 'textarea';\n          break;\n        case 'radio':\n          inputType = 'radio';\n          break;\n        case 'select':\n          inputType = 'select';\n          break;\n        default:\n          inputType = 'text';\n          break;\n      }\n      this.setState({ type: inputType });\n    }\n  }, {\n    key: 'validateEmail',\n    value: function validateEmail(value) {\n      var pattern = this.handleRegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      var valid = pattern.test(value);\n      return this.handleErrorMessage(valid, 'The email address you have entered is not valid');\n    }\n  }, {\n    key: 'validateName',\n    value: function validateName(value) {\n      var pattern = this.handleRegExp(/\\d/);\n      var maxL = this.props.maxLength;\n      var valid = void 0;\n\n      if (maxL && value.length < maxL || !maxL) {\n        valid = pattern.test(value);\n        if (!this.props.customRegex) {\n          valid = !valid;\n        }\n        return this.handleErrorMessage(valid);\n      } else {\n        return this.handleErrorMessage(valid, 'May not contain more than ' + maxL + ' characters');\n      }\n    }\n  }, {\n    key: 'validateUrl',\n    value: function validateUrl(value) {\n      var usableUrl = '';\n      if (/^(https:\\/\\/|http:\\/\\/)/.test(value)) {\n        usableUrl = value;\n      } else {\n        usableUrl = 'https:// ' + value;\n      }\n      var valid = /[.]+/.test(usableUrl);\n      return this.handleErrorMessage(valid, 'Url is not valid');\n    }\n  }, {\n    key: 'validateTextarea',\n    value: function validateTextarea(value) {\n      var pattern = this.handleRegExp('');\n      var minL = this.props.minLength;\n      var maxL = this.props.maxLength;\n      var valid = void 0;\n      if (minL && value.length < minL) {\n        return this.handleErrorMessage(valid, 'May not contain less than ' + minL + ' characters');\n      } else if (maxL && value.length > maxL) {\n        return this.handleErrorMessage(valid, 'May not contain more than ' + maxL + ' characters');\n      } else {\n        valid = pattern.test(value);\n        return this.handleErrorMessage(valid);\n      }\n    }\n  }, {\n    key: 'validatePassword',\n    value: function validatePassword(value) {\n      var min = this.props.minLength && this.props.minLength !== 0 ? this.props.minLength : 8;\n      var pattern = this.handleRegExp('');\n      if (value.length < min) {\n        return this.handleErrorMessage(false, 'Password needs to have more than ' + min + ' characters', true);\n      } else if (!pattern.test(value)) {\n        return this.handleErrorMessage(false);\n      }\n    }\n  }, {\n    key: 'validateDate',\n    value: function validateDate(value) {\n      console.log(\"validate date\");\n      var selectedDate = new Date(value);\n      var min = void 0,\n          max = void 0;\n\n      if (this.props.maxDate !== null && this.props.minDate !== null) {\n        max = new Date(this.props.maxDate);\n        min = new Date(this.props.minDate);\n        return this.handleErrorMessage(min >= selectedDate && max <= selectedDate, 'Please select a date between ' + min.toDateString() + ' and ' + max.toDateString());\n      } else if (this.props.minDate !== null) {\n        min = new Date(this.props.minDate);\n        return this.handleErrorMessage(min >= selectedDate, 'Please select a date after ' + min.toDateString());\n      } else if (this.props.maxDate !== null) {\n        max = new Date(this.props.maxDate);\n        return this.handleErrorMessage(max <= selectedDate, 'Please select a date before ' + max.toDateString());\n      }\n    }\n  }, {\n    key: 'validateNumber',\n    value: function validateNumber(value) {\n      var min = this.props.min;\n      var max = this.props.max;\n      var res = '';\n      if (min && min > value) {\n        res = this.handleErrorMessage(false, 'Number must be higher than ' + min + '.');\n      } else if (max && max < value) {\n        res = this.handleErrorMessage(false, 'Number must be lower than ' + max);\n      }\n      return res;\n    }\n  }, {\n    key: 'validateCheckbox',\n    value: function validateCheckbox(value) {\n      var res = null;\n      if (this.props.options.length > 0) {\n        var minL = this.props.minLength;\n        var maxL = this.props.maxLength;\n        if (minL && minL > value.length) {\n          res = 'Please select more than ' + minL + ' options';\n        } else if (maxL && maxL < value.length) {\n          res = 'Please select less than ' + maxL + ' options';\n        }\n      }\n      return res;\n    }\n  }, {\n    key: 'isEmpty',\n    value: function isEmpty(v) {\n      return v === null || v === undefined || typeof v === 'string' && v !== '' || (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v.length > 0 || typeof v === 'boolean' && v && this.props.required;\n    }\n  }, {\n    key: 'validateInput',\n    value: function validateInput() {\n      var props = this.props;\n      var error = null;\n      if (this.isEmpty(props.value) && props.isVisible) {\n        switch (props.type) {\n          case 'email':\n            error = this.validateEmail(props.value);\n            break;\n          case 'password':\n            error = this.validatePassword(props.value);\n            break;\n          case 'name':\n          case 'text':\n            error = this.validateName(props.value);\n            break;\n          case 'date':\n            error = this.validateDate(props.value);\n            break;\n          case 'number':\n            error = this.validateNumber(props.value);\n            break;\n          case 'textarea':\n            error = this.validateTextarea(props.value);\n          case 'checkbox':\n            error = this.validateCheckbox(props.value);\n            break;\n          case 'url':\n            error = this.validateUrl(props.value);\n            break;\n          case 'range':\n          default:\n            error = null;\n            break;\n        }\n      } else if (props.required && props.isVisible) {\n        error = 'This field is required';\n      }\n\n      if (this.state.touchedByParent) {\n        this.props.sendResultsToForm(!error);\n      }\n      this.setState({\n        validationMessage: error,\n        touchedByParent: false\n      });\n    }\n  }, {\n    key: 'handleErrorMessage',\n    value: function handleErrorMessage(v) {\n      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Invalid Input';\n      var ignoreCustom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!v) {\n        return this.props.customErrorMessage && !ignoreCustom ? this.props.customErrorMessage : msg;\n      }\n      return null;\n    }\n  }, {\n    key: 'handleRegExp',\n    value: function handleRegExp(regX) {\n      if (this.props.customRegex) {\n        return new RegExp(this.props.customRegex);\n      }\n      return new RegExp(regX);\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(v) {\n      if (!this.props.disabled) {\n        this.props.onChange(v, this.props.stateName);\n      }\n    }\n  }, {\n    key: 'renderInput',\n    value: function renderInput() {\n      var _this3 = this;\n\n      var invalidClass = this.state.validationMessage ? 'gc-input--invalid' : '';\n      var disabledClass = this.props.disabled ? 'gc-input--disabled' : '';\n      if (this.props.type === 'textarea') {\n        var textareaClass = 'gc-input__textarea--' + this.props.size;\n        return _react2.default.createElement('textarea', {\n          className: invalidClass + ' ' + disabledClass + ' ' + textareaClass,\n          disabled: this.props.disabled,\n          name: this.props.name,\n          defaultValue: this.props.value,\n          placeholder: this.props.placeholder,\n          onBlur: function onBlur() {\n            return _this3.validateInput();\n          },\n          onChange: function onChange(e) {\n            return _this3.handleChange(e.target.value);\n          },\n          min: this.props.min,\n          max: this.props.max,\n          title: this.props.title\n        });\n      } else if (this.props.type === 'radio') {\n        return _react2.default.createElement(_GCRadio2.default, _extends({}, this.props, { onChange: function onChange(v) {\n            return _this3.handleChange(v);\n          } }));\n      } else if (this.props.type === 'checkbox') {\n        return _react2.default.createElement(_GCCheckbox2.default, _extends({}, this.props, { onChange: function onChange(v) {\n            return _this3.handleChange(v);\n          } }));\n      } else if (this.props.type === 'select') {\n        return _react2.default.createElement(_GCSelect2.default, _extends({}, this.props, {\n          onChange: function onChange(v) {\n            return _this3.handleChange(v);\n          },\n          validateInput: function validateInput() {\n            return _this3.validateInput();\n          },\n          dynamicClasses: invalidClass + ' ' + disabledClass\n        }));\n      } else if (this.props.type === 'number') {\n        return _react2.default.createElement('input', {\n          className: invalidClass + ' ' + disabledClass,\n          disabled: this.props.disabled,\n          name: this.props.name,\n          type: this.state.type,\n          placeholder: this.props.placeholder,\n          onBlur: function onBlur() {\n            return _this3.validateInput();\n          },\n          onChange: function onChange(e) {\n            return _this3.handleChange(e.target.value);\n          },\n          min: this.props.min,\n          max: this.props.max,\n          title: this.props.title,\n          defaultValue: this.props.value\n        });\n      } else {\n        return _react2.default.createElement('input', {\n          className: invalidClass + ' ' + disabledClass,\n          disabled: this.props.disabled,\n          name: this.props.name,\n          type: this.state.type,\n          value: this.props.value,\n          placeholder: this.props.placeholder,\n          onBlur: function onBlur() {\n            return _this3.validateInput();\n          },\n          onInput: function onInput(e) {\n            return _this3.handleChange(e.target.value);\n          },\n          onChange: function onChange(e) {\n            return _this3.handleChange(e.target.value);\n          },\n          maxLength: this.props.max,\n          min: this.props.min,\n          max: this.props.max,\n          title: this.props.title\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (this.props.isVisible) {\n        return _react2.default.createElement(\n          'div',\n          { className: 'gc-input ' + this.props.extendedClassNames },\n          this.renderInput(),\n          this.props.title !== \"\" && this.props.type !== 'select' && this.props.type !== 'radio' && this.props.type !== 'date' && _react2.default.createElement(_GCInputLabel2.default, {\n            title: this.props.title,\n            value: this.props.value,\n            name: this.props.name,\n            required: this.props.required }),\n          this.state.validationMessage && _react2.default.createElement(\n            'p',\n            { className: 'gc-input__error-msg' },\n            this.state.validationMessage\n          )\n        );\n      } else {\n        return _react2.default.createElement(\n          'span',\n          null,\n          '\\xA0'\n        );\n      }\n    }\n  }]);\n\n  return GCInput;\n}(_react.Component);\n\nGCInput.propTypes = {\n  extendedClassNames: _propTypes2.default.string,\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.array]),\n  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.array]),\n  stateName: _propTypes2.default.string.isRequired,\n  type: _propTypes2.default.string.isRequired,\n  disabled: _propTypes2.default.bool,\n  name: _propTypes2.default.string,\n  placeholder: _propTypes2.default.string,\n  maxLength: _propTypes2.default.number,\n  minLength: _propTypes2.default.number,\n  maxDate: _propTypes2.default.string,\n  minDate: _propTypes2.default.string,\n  max: _propTypes2.default.number,\n  min: _propTypes2.default.number,\n  onChange: _propTypes2.default.func.isRequired,\n  customRegex: _propTypes2.default.object,\n  customErrorMessage: _propTypes2.default.string,\n  touchedByParent: _propTypes2.default.bool,\n  sendResultsToForm: _propTypes2.default.func,\n  options: _propTypes2.default.array,\n  required: _propTypes2.default.bool,\n  size: _propTypes2.default.string,\n  title: _propTypes2.default.string,\n  data: _propTypes2.default.object,\n  formTemplate: _propTypes2.default.func,\n  isVisible: _propTypes2.default.bool\n};\n\nGCInput.defaultProps = {\n  extendedClassNames: '',\n  value: null,\n  defaultValue: null,\n  disabled: false,\n  name: '',\n  placeholder: '',\n  maxLength: null,\n  minLength: null,\n  maxDate: null,\n  minDate: null,\n  max: null,\n  min: null,\n  customRegex: null,\n  customErrorMessage: null,\n  touchedByParent: false,\n  sendResultsToForm: null,\n  options: [],\n  required: false,\n  size: 'medium',\n  title: null,\n  data: null,\n  formTemplate: null,\n  isVisible: true\n};\n\nexports.default = GCInput;",
dependencies: ["react","prop-types","lodash","./GCRadio","./GCCheckbox","./GCSelect","./GCInputLabel"],
sourceMap: {},
headerContent: undefined,
mtime: 1503951121000,
devLibsRequired : undefined
};